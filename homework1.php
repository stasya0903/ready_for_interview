<?php
/*
 1========
 В чем заключается суть ключевого слова global? Когда его применение целесообразно?

Ключевое слово global,  используется для импорта переменных из глобальной области видимости
в локальную область видимости. Его использование лучше избегать поскольку оно приводит к появлению
излишней взаимозависимости между классами, затрудняет разделение логики, приводит к загрязнению глобального
пространства имён переменными, которые используются в одном конкретном контексте, и не нужны в других.Как исключение
globals  можно использовать когда переменной присваивается значение и оно не меняется на протяжении
всего выполнения скрипта и не будет меняться с развитием проэкта


 2==========
 Какие суперглобальные переменные вы знаете?

-$_GET;$_POST,$_GLOBALS, $_SERVER, $_SESSION, $_FILES, $_COOKIES $_REQUEST

 3==========
Когда нужно использовать закрывающий дескриптор “?>“?
Когда файл содержит не только php но и необходимо указать браузеру где заканчиваеться php код
Если файл содержит только код PHP, предпочтительно опустить закрывающий тег в конце файла.
Это помогает избежать добавления случайных символов пробела или перевода строки после закрывающего тега PHP,
которые могут послужить причиной нежелательных эффектов, так как PHP начинает выводить данные в буфер
при отсутствии намерения у программиста выводить какие-либо данные в этой точке скрипта.*/

//4. Что выведет программа в каждом случае и почему?
function changeX($x)
{
    $x += 5;
    echo $x;
}

$x = 1;
echo $x; // 1
changeX($x); // 6
echo $x; //
//поскольку переменные находятся в разных областях видимостиб первая в глобальной а вторая только
// в локальной в функции. Сначала мы выводим переменную из глобальной ОВ, затем выводиться переменная из функции,
//а затем снова из глоб ОВ

//5. Что выведет программа в каждом случае и почему?
function test()
{
    static $a = 0;
    echo $a;
    $a++;
}

test(); //0
test();//1
test();//2
//static означает что переменная cтатистичская то еcть она не теряет своего значения,
// когда выполнение программы выходит из этой области видимости функции

//6. Как перевернуть массив? Есть массив array(‘h’, ‘e’, ‘l’, ‘l’, ‘o’), как из него получить array(‘o’, ‘l’, ‘l’, ‘e’, ‘h’)?
$array1 = ["h", "e", "l", "l", "o"];
$array2 = array_reverse($array1);

//7. Как перевернуть строку задом наперед?
$str = "123456";
strrev($str);
//8. Что будет результатом работы данного кода?
$a = 0;
if ($b = $a)
    echo "One";
else
    echo "Two";
// Two поскольку $b не определенна , то сравнивается $a и null

//9. Сгенерировать три случайных числа в диапазоне от 0 до 10. Если сумма этих чисел меньше 15, сгенерировать новую тройку.

$arrayOfNum = createRandomNum(3, 0, 10);

while (isSumMoreThan15($arrayOfNum)) {
    $arrayOfNum = createRandomNum(3, 0, 10);
}

extract($arrayOfNum);
echo "Номера " . $num1 . " " . $num2 . " " . $num3 . " ";

function getRandomNum($min, $max)
{
    return rand($min, $max);
}

function createRandomNum($amountOfNum, $min, $max)
{
    $nums = [];

    for ($i = 1; $i <= $amountOfNum; $i++) {

        $nums["num{$i}"] = getRandomNum($min, $max);
    }

    return $nums;
}

function isSumMoreThan15($arrayOfNum)
{
    $summary = 0;
    foreach ($arrayOfNum as $number => $value) {
        $summary += $value;
    }
    if ($summary > 15) {
        return true;
    }
    return false;

}

//10. Какое число выведет данный код?
$i = 10;
$i += ++$i + $i + $i++;
echo $i; // 45

//Надеюсь отсутствие знака $ перед переменной это только опечатка, в этом случае выведется 45
//(сначала выполниться префиксный инкремент а потом сложение , затем постфиксный инкремент)
//11. Что выведет приведенный ниже код?
$a = "1";
$a[$a] = "2";
echo $a;

//21 поскольку  $a это строка, массив символов, добавляя новый элемент с индексом 1 он займет место следом за 1